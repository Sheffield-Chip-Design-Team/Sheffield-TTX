name: test
on: [push, workflow_dispatch]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install linux dependencies 
        shell: bash
        run: sudo apt-get update && sudo apt-get install -y iverilog && sudo apt install -y libxml2-utils

      # Set Python up and install cocotb
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python packages
        shell: bash
        run: pip install -r test/requirements.txt

      - name: Run tests
        run: |
          cd test
          make clean
          make
          # Guard against missing result files
          files=$(find . -type f -name '*_results.xml')
          if [ -n "$files" ]; then
            ! grep -q "<failure" $files
          fi

      - name: Find all results.xml files
        id: find_results
        run: |
          results=$(find test -type f -name '*_results.xml')
          {
            echo "results<<EOF"
            echo "$results"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Find all vcd files
        id: find_waveforms
        run: |
          vcds=$(find test -type f -name '*.vcd')
          {
            echo "vcds<<EOF"
            echo "$vcds"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Find all log files
        id: find_logs
        run: |
          logs=$(find test -type f -name '*.log')
          {
            echo "logs<<EOF"
            echo "$logs"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Test Summary
        uses: test-summary/action@v2.3
        with:
          paths: ${{ steps.find_results.outputs.results }}
        if: always()

      - name: Build Custom Test Summary
        if: always()
        run: |
          echo "## Test Run Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Seed | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|--------|" >> $GITHUB_STEP_SUMMARY

          for f in $(find test -type f -name '*_results.xml'); do
          
            seed=$(xmllint --xpath 'string(//property[@name="random_seed"]/@value)' "$f" 2>/dev/null || echo "-")
            while IFS= read -r testcase; do
              name=$(echo "$testcase" | xmllint --xpath 'string(//@name)' - 2>/dev/null || echo "unknown")
              if echo "$testcase" | grep -q "<failure"; then
                status="FAIL"
              else
                status="PASS"
              fi

              echo "| $name | $seed | $status |" >> $GITHUB_STEP_SUMMARY
            done < <(xmllint --xpath '//testcase' "$f" 2>/dev/null || echo "")
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Errors from run_tests log" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          for log in $(find test -type f -name '*.log'); do
            echo "--- $log ---" >> $GITHUB_STEP_SUMMARY
            grep -i error "$log" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload test artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            ${{ steps.find_waveforms.outputs.vcds }}
            ${{ steps.find_results.outputs.results }}
            ${{ steps.find_logs.outputs.logs }}

      - name: Report Test Status
        run: |
          files=$(find . -type f -name '*_results.xml')
          if [ -n "$files" ]; then
            if grep -q "<failure" $files; then
              echo "Test failure detected!"
              exit 1
            fi
          fi
